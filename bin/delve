#!/usr/bin/env ruby
# frozen_string_literal: true

require "byebug"
require "thor"
require_relative "../lib/loader.rb"

class Delve < Thor
  package_name "Delve, by Zendesk"

  PROJECT_ROOT = File.expand_path("./../", File.dirname(__FILE__))
  DATA_PATH = PROJECT_ROOT + "/data/"

  def self.exit_on_failure?
    true
  end

  attr_reader :users, :tickets, :organizations

  desc "fields SOURCE", "List all the searchable fields in SOURCE"
  map "-f" => :fields
  option :users, aliases: "-u", desc: "Show the fields for the \"Users\" source"
  option :tickets, aliases: "-t", desc: "Show the fields for the \"Tickets\" source"
  option :organizations, aliases: "-o", desc: "Show the fields for the \"Organizations\" source"

  def fields
    if options[:users]
      @users = Loader.json_file(in_data_path("users.json"))
      puts users.all_keys
      return
    end

    if options[:tickets]
      @tickets = Loader.json_file(in_data_path("tickets.json"))
      puts tickets.all_keys
      return
    end

    if options[:organizations]
      @organizations = Loader.json_file(in_data_path("organizations.json"))
      puts organizations.all_keys
      return
    end

  end

  desc "search FIELD VALUE --SOURCE", "Searches a FIELD for VALUE in SOURCE"
  option :users, aliases: "-u", desc: "Search within the \"Users\" source"
  option :tickets, aliases: "-t", desc: "Search within the \"Tickets\" source"
  option :organizations, aliases: "-o", desc: "Search within the \"Organizations\" source"

  def search(field, value)
    if options[:users]
      init_users
      result = User.new(users.data).find_by(field.to_sym, value)

      if result.empty?
        puts "Searching for \"#{value}\" in \"#{field}\" in the \"Users\" source returned no results."
        return
      end

      puts result
      return
    end

    show_help("search")
  end

  private

  private_constant :PROJECT_ROOT, :DATA_PATH

  def in_data_path(name)
    DATA_PATH + name
  end

  def init_users
    @users = Loader.json_file(in_data_path("users.json"))
    require_relative PROJECT_ROOT + "/app/model/user.rb"
  end

  def show_help(command)
    Delve.command_help(Thor::Base.shell.new, command)
  end
end

Delve.start
